class Cong:
    def __init__(self):
        self.a = None
        self.b = None
    def thuan(self, a, b):
        self.a = a
        self.b = b
        return a + b
    def nguoc(self, grad_output):
        return grad_output, grad_output

class Nhan:
    def __init__(self):
        self.a = None
        self.b = None
    def thuan(self, a, b):
        self.a = a
        self.b = b
        return a * b
    def nguoc(self, grad_output):
        return grad_output * self.b, grad_output * self.a

class Luythua:
    def __init__(self, mu):
        self.a = None
        self.mu = mu
    def thuan(self, a):
        self.a = a
        return a ** self.mu
    def nguoc(self, grad_output):
        return grad_output * self.mu * (self.a ** (self.mu - 1))

node_cong1 = Cong()
node_cong2 = Cong()
node_nhan1 = Nhan()
node_nhan2 = Nhan()
node_luythua = Luythua(2)

w = 2
b = 8
x = -2
y = 2

c = node_nhan1.thuan(w, x)
a = node_cong1.thuan(c, b)
d = node_cong2.thuan(a, -y)
e = node_luythua.thuan(d)
loss = node_nhan2.thuan(0.5, e)
print('Loss:', loss)

_, grad_e = node_nhan2.nguoc(1)
print('A:', grad_e)
grad_d = node_luythua.nguoc(grad_e)
print('B:', grad_d)
grad_a, _ = node_cong2.nguoc(grad_d)
print('C:', grad_a)
grad_c, grad_b = node_cong1.nguoc(grad_d)
print('D:', grad_c)
print('E:', grad_b)
grad_w, _ = node_nhan1.nguoc(grad_c)
print('F:', grad_w)
